I"‰£<p>Music genre classification has been an interesting problem in the field of Music Information Retrieval (MIR). In this tutorial, We will try to classify music genre using hidden Markov models which are very good at modeling time series data. As Music audio files are time series signals, we expect that HMMs will suit our needs and give us an accurate classification. An HMM is a model that represents probability distributions over sequences of observations. We assume that the outputs are generated by hidden states. To learn more about HMM click click <a href="https://www.robots.ox.ac.uk/~vgg/rg/slides/hmm.pdf">here</a>. Also, you can find a good explanation for HHMs in the time series use case <a href="https://towardsdatascience.com/hidden-markov-models-for-time-series-classification-basic-overview-a59b74e5e65b">here</a>.</p>

<h2 id="dataset--features">Dataset &amp; Features</h2>

<p>We will use a dataset provided by Marsyas (Music Analysis, Retrieval, and Synthesis for Audio Signals) which is an open source software, called GTZAN. It‚Äôs a collection of 1000 audio tracks each 30 seconds long. There are 10 genres represented, each containing 100 tracks. All the tracks are 22050Hz Mono 16-bit audio files in .au format. In our tutorial, we will use all provided genres (blues, classical, jazz, country, pop, rock, metal, disco, hip-hop, reggae). For music genre classification, we will be easier for us to use WAV files, because they can be easily read by the scipy library. We would, therefore, have to convert our AU files to WAV format. The dataset can be accessed <a href="http://opihi.cs.uvic.ca/sound/genres.tar.gz">here</a>.</p>

<p>For audio processing, we needed to find a way to concisely represent song waveforms. Mel Frequency Cepstral Coefficients (MFCC) is a good way to do this. MFCC takes the power spectrum of a signal and then uses a combination of filter banks and discrete cosine transform to extract features. More details about MFCC can be found <a href="http://practicalcryptography.com/miscellaneous/machine-learning/guide-mel-frequency-cepstral-coefficients-mfccs/">here</a>.</p>

<p>Let‚Äôs get started by importing the necessary libraries for our project.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">from</span> <span class="n">python_speech_features</span> <span class="kn">import</span> <span class="n">mfcc</span><span class="p">,</span> <span class="n">logfbank</span>
    <span class="kn">from</span> <span class="n">scipy.io</span> <span class="kn">import</span> <span class="n">wavfile</span>
    <span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
    <span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
    <span class="kn">from</span> <span class="n">hmmlearn</span> <span class="kn">import</span> <span class="n">hmm</span>
    <span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">confusion_matrix</span>
    <span class="kn">import</span> <span class="n">itertools</span>
    <span class="kn">import</span> <span class="n">os</span>
</code></pre></div></div>

<p>Let‚Äôs pick one song from our dataset and extract MFCC and Filter banks features.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">sampling_freq</span><span class="p">,</span> <span class="n">audio</span> <span class="o">=</span> <span class="n">wavfile</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="sh">"</span><span class="s">genres/blues/blues.00000.wav</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">mfcc_features</span> <span class="o">=</span> <span class="nf">mfcc</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="n">sampling_freq</span><span class="p">)</span>
    <span class="n">filterbank_features</span> <span class="o">=</span> <span class="nf">logfbank</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="n">sampling_freq</span><span class="p">)</span>
</code></pre></div></div>

<p>We take a look at the shapes of the extracted features.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="s">MFCC:</span><span class="se">\n</span><span class="s">Number of windows =</span><span class="sh">'</span><span class="p">,</span> <span class="n">mfcc_features</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="s">Length of each feature =</span><span class="sh">'</span><span class="p">,</span> <span class="n">mfcc_features</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="s">Filter bank:</span><span class="se">\n</span><span class="s">Number of windows =</span><span class="sh">'</span><span class="p">,</span> <span class="n">filterbank_features</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="s">Length of each feature =</span><span class="sh">'</span><span class="p">,</span> <span class="n">filterbank_features</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>
<p><em>MFCC:
Number of windows = 1496
Length of each feature = 13
Filter bank:
Number of windows = 1496
Length of each feature = 26</em></p>

<p>Now, let‚Äôs go through some samples of our dataset. We loop over the genres folders and visualize the MFCC features for the first song in each folder.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">glob</span>
<span class="kn">import</span> <span class="n">os.path</span> <span class="k">as</span> <span class="n">path</span>
<span class="n">genre_list</span> <span class="o">=</span> <span class="p">[</span><span class="err">‚Äú</span><span class="n">blues</span><span class="err">‚Äù</span><span class="p">,</span><span class="err">‚Äù</span><span class="n">classical</span><span class="err">‚Äù</span><span class="p">,</span> <span class="err">‚Äú</span><span class="n">jazz</span><span class="err">‚Äù</span><span class="p">,</span> <span class="err">‚Äú</span><span class="n">country</span><span class="err">‚Äù</span><span class="p">,</span> <span class="err">‚Äú</span><span class="n">pop</span><span class="err">‚Äù</span><span class="p">,</span> <span class="err">‚Äú</span><span class="n">rock</span><span class="err">‚Äù</span><span class="p">,</span> <span class="err">‚Äú</span><span class="n">metal</span><span class="err">‚Äù</span><span class="p">,</span> <span class="err">‚Äú</span><span class="n">disco</span><span class="err">‚Äù</span><span class="p">,</span> <span class="err">‚Äú</span><span class="n">hiphop</span><span class="err">‚Äù</span><span class="p">,</span> <span class="err">‚Äú</span><span class="n">reggae</span><span class="err">‚Äù</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">genre_list</span><span class="p">))</span>
<span class="n">figure</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="k">for</span> <span class="n">idx</span> <span class="p">,</span><span class="n">genre</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">genre_list</span><span class="p">):</span> 
   <span class="n">example_data_path</span> <span class="o">=</span> <span class="err">‚Äò</span><span class="n">genres</span><span class="o">/</span><span class="err">‚Äô</span> <span class="o">+</span> <span class="n">genre</span>
   <span class="n">file_paths</span> <span class="o">=</span> <span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">example_data_path</span><span class="p">,</span> <span class="err">‚Äò</span><span class="o">*</span><span class="p">.</span><span class="n">wav</span><span class="err">‚Äô</span><span class="p">))</span>
   <span class="n">sampling_freq</span><span class="p">,</span> <span class="n">audio</span> <span class="o">=</span> <span class="n">wavfile</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">file_paths</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
   <span class="n">mfcc_features</span> <span class="o">=</span> <span class="nf">mfcc</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="n">sampling_freq</span><span class="p">,</span> <span class="n">nfft</span><span class="o">=</span><span class="mi">1024</span><span class="p">)</span>
   <span class="nf">print</span><span class="p">(</span><span class="n">file_paths</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">mfcc_features</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
   <span class="n">plt</span><span class="p">.</span><span class="nf">yscale</span><span class="p">(</span><span class="err">‚Äò</span><span class="n">linear</span><span class="err">‚Äô</span><span class="p">)</span>
   <span class="n">plt</span><span class="p">.</span><span class="nf">matshow</span><span class="p">((</span><span class="n">mfcc_features</span><span class="p">.</span><span class="n">T</span><span class="p">)[:,:</span><span class="mi">300</span><span class="p">])</span>
   <span class="n">plt</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="n">genre</span><span class="p">,</span> <span class="n">horizontalalignment</span><span class="o">=</span><span class="err">‚Äô</span><span class="n">center</span><span class="err">‚Äô</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
 
<span class="n">plt</span><span class="p">.</span><span class="nf">yscale</span><span class="p">(</span><span class="err">‚Äò</span><span class="n">linear</span><span class="err">‚Äô</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/posts/hmm/songs-prev.png" alt="songs mfcc" /></p>

<h2 id="building-hidden-markov-models">Building Hidden Markov Models</h2>

<p>We built a class to handle HMM training and prediction by wrapping the model provided by hmmlearn library.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">HMMTrainer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_name</span><span class="o">=</span><span class="sh">'</span><span class="s">GaussianHMM</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_components</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">cov_type</span><span class="o">=</span><span class="sh">'</span><span class="s">diag</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_iter</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model_name</span> <span class="o">=</span> <span class="n">model_name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">n_components</span> <span class="o">=</span> <span class="n">n_components</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cov_type</span> <span class="o">=</span> <span class="n">cov_type</span>
        <span class="n">self</span><span class="p">.</span><span class="n">n_iter</span> <span class="o">=</span> <span class="n">n_iter</span>
        <span class="n">self</span><span class="p">.</span><span class="n">models</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">model_name</span> <span class="o">==</span> <span class="sh">'</span><span class="s">GaussianHMM</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">hmm</span><span class="p">.</span><span class="nc">GaussianHMM</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">n_components</span><span class="p">,</span>        <span class="n">covariance_type</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">cov_type</span><span class="p">,</span><span class="n">n_iter</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">n_iter</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">'</span><span class="s">Invalid model type</span><span class="sh">'</span><span class="p">)</span> 

    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="n">np</span><span class="p">.</span><span class="nf">seterr</span><span class="p">(</span><span class="nb">all</span><span class="o">=</span><span class="sh">'</span><span class="s">ignore</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">))</span>
        <span class="c1"># Run the model on input data
</span>    <span class="k">def</span> <span class="nf">get_score</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">input_data</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="nf">score</span><span class="p">(</span><span class="n">input_data</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="training--evaluating-the-hidden-markov-models">Training &amp; evaluating the Hidden Markov Models</h2>

<p>For training the Hidden Markov Models, We loop over the subfolder in our dataset, we iterate over the songs in the subfolder in order to extract the features and append it to a variable.
We should store all trained HMM models, so we will be able to predict the class of unseen songs. As HMM is a generative model for unsupervised learning, we don‚Äôt need labels to build HMM models for each class. We explicitly assume that separate HMM models will be built for
each class.
Note that we have used 4 as the number of components which is exactly the number of hidden state in the HMM models. Finding out the best number of states is about testing and experimenting with different values and pick the one that optimizes the predictions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">hmm_models</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">input_folder</span> <span class="o">=</span> <span class="sh">'</span><span class="s">genres/</span><span class="sh">'</span>
    <span class="c1"># Parse the input directory
</span>    <span class="k">for</span> <span class="n">dirname</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">input_folder</span><span class="p">):</span>
        <span class="c1"># Get the name of the subfolder
</span>        <span class="n">subfolder</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">input_folder</span><span class="p">,</span> <span class="n">dirname</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">subfolder</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="c1"># Extract the label
</span>        <span class="n">label</span> <span class="o">=</span> <span class="n">subfolder</span><span class="p">[</span><span class="n">subfolder</span><span class="p">.</span><span class="nf">rfind</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]</span>
        <span class="c1"># Initialize variables
</span>        <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([])</span>
        <span class="n">y_words</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1"># Iterate through the audio files (leaving 1 file for testing in each class)
</span>        <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">subfolder</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.wav</span><span class="sh">'</span><span class="p">)][:</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="c1"># Read the input file
</span>                <span class="n">filepath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">subfolder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
                <span class="n">sampling_freq</span><span class="p">,</span> <span class="n">audio</span> <span class="o">=</span> <span class="n">wavfile</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
                <span class="c1"># Extract MFCC features
</span>                <span class="n">mfcc_features</span> <span class="o">=</span> <span class="nf">mfcc</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="n">sampling_freq</span><span class="p">)</span>
                <span class="c1"># Append to the variable X
</span>                <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">X</span> <span class="o">=</span> <span class="n">mfcc_features</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">mfcc_features</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

                <span class="c1"># Append the label
</span>                <span class="n">y_words</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">label</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">X.shape =</span><span class="sh">'</span><span class="p">,</span> <span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
        <span class="c1"># Train and save HMM model
</span>        <span class="n">hmm_trainer</span> <span class="o">=</span> <span class="nc">HMMTrainer</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">hmm_trainer</span><span class="p">.</span><span class="nf">train</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="n">hmm_models</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">hmm_trainer</span><span class="p">,</span> <span class="n">label</span><span class="p">))</span>
        <span class="n">hmm_trainer</span> <span class="o">=</span> <span class="bp">None</span>
</code></pre></div></div>

<p>Now it‚Äôs time to evaluate our models, We iterate over the test dataset subfolders, we extract the features then we iterate through all HMM models and pick the one with the highest score.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">input_folder</span> <span class="o">=</span> <span class="sh">'</span><span class="s">test/</span><span class="sh">'</span>
<span class="n">real_labels</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">pred_labels</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">dirname</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">input_folder</span><span class="p">):</span>

  <span class="n">subfolder</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">input_folder</span><span class="p">,</span> <span class="n">dirname</span><span class="p">)</span>
  <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">subfolder</span><span class="p">):</span>
    <span class="k">continue</span>
  <span class="c1"># Extract the label
</span>  <span class="n">label_real</span> <span class="o">=</span> <span class="n">subfolder</span><span class="p">[</span><span class="n">subfolder</span><span class="p">.</span><span class="nf">rfind</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]</span>

  <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">subfolder</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.wav</span><span class="sh">'</span><span class="p">)][:</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
    <span class="n">real_labels</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">label_real</span><span class="p">)</span>
    <span class="n">filepath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">subfolder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
    <span class="n">sampling_freq</span><span class="p">,</span> <span class="n">audio</span> <span class="o">=</span> <span class="n">wavfile</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
    <span class="n">mfcc_features</span> <span class="o">=</span> <span class="nf">mfcc</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="n">sampling_freq</span><span class="p">)</span>
    <span class="n">max_score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">9999999999999999999</span>
    <span class="n">output_label</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">hmm_models</span><span class="p">:</span>
       <span class="n">hmm_model</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="n">item</span>
       <span class="n">score</span> <span class="o">=</span> <span class="n">hmm_model</span><span class="p">.</span><span class="nf">get_score</span><span class="p">(</span><span class="n">mfcc_features</span><span class="p">)</span>
       <span class="k">if</span> <span class="n">score</span> <span class="o">&gt;</span> <span class="n">max_score</span><span class="p">:</span>
          <span class="n">max_score</span> <span class="o">=</span> <span class="n">score</span>
          <span class="n">output_label</span> <span class="o">=</span> <span class="n">label</span>
<span class="n">pred_labels</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">output_label</span><span class="p">)</span>
</code></pre></div></div>

<p>Till now, We have the real label for each song in our test dataset and we have estimated the predicted ones. As our problem is a multiclass classification, the best way to evaluate our model‚Äôs performance is to look at the confusion matrix (read more here).
We use the confusion matrix provided by sklearn and we visualize it using matplotlib library.
First, let‚Äôs define a function to take care of the matric plotting. This function prints and plots the confusion matrix. Normalization can be applied by setting <code class="language-plaintext highlighter-rouge">normalize=True</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">cm</span><span class="p">,</span> <span class="n">classes</span><span class="p">,</span>
                          <span class="n">normalize</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                          <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Confusion matrix</span><span class="sh">'</span><span class="p">,</span>
                          <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">Blues</span><span class="p">):</span>

    <span class="k">if</span> <span class="n">normalize</span><span class="p">:</span>
        <span class="n">cm</span> <span class="o">=</span> <span class="n">cm</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="sh">'</span><span class="s">float</span><span class="sh">'</span><span class="p">)</span> <span class="o">/</span> <span class="n">cm</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)[:,</span> <span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">]</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Normalized confusion matrix</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Confusion matrix, without normalization</span><span class="sh">'</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="n">cm</span><span class="p">)</span>

    <span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">cm</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="sh">'</span><span class="s">nearest</span><span class="sh">'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">()</span>
    <span class="n">tick_marks</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">classes</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">tick_marks</span><span class="p">,</span> <span class="n">classes</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">yticks</span><span class="p">(</span><span class="n">tick_marks</span><span class="p">,</span> <span class="n">classes</span><span class="p">)</span>

    <span class="n">fmt</span> <span class="o">=</span> <span class="sh">'</span><span class="s">.2f</span><span class="sh">'</span> <span class="k">if</span> <span class="n">normalize</span> <span class="k">else</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span>
    <span class="n">thresh</span> <span class="o">=</span> <span class="n">cm</span><span class="p">.</span><span class="nf">max</span><span class="p">()</span> <span class="o">/</span> <span class="mf">2.</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">itertools</span><span class="p">.</span><span class="nf">product</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nf">range</span><span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])):</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="nf">format</span><span class="p">(</span><span class="n">cm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">],</span> <span class="n">fmt</span><span class="p">),</span>
                 <span class="n">horizontalalignment</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">white</span><span class="sh">"</span> <span class="k">if</span> <span class="n">cm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">thresh</span> <span class="k">else</span> <span class="sh">"</span><span class="s">black</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">True label</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Predicted label</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>Time to compute the confusion matrix and visualize it!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">cm</span> <span class="o">=</span> <span class="nf">confusion_matrix</span><span class="p">(</span><span class="n">real</span><span class="p">,</span> <span class="n">pred</span><span class="p">)</span>
    <span class="n">np</span><span class="p">.</span><span class="nf">set_printoptions</span><span class="p">(</span><span class="n">precision</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">classes</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">blues</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">classical</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">country</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">disco</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">hiphop</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">jazz</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">metal</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pop</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">reggae</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rock</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">()</span>
    <span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">cm</span><span class="p">,</span> <span class="n">classes</span><span class="o">=</span><span class="n">classes</span><span class="p">,</span> <span class="n">normalize</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                        <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Normalized confusion matrix</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/posts/hmm/confusion-matrix.png" alt="confusion matrix" /></p>

<p>For a perfect classifier, we would have expected a diagonal of dark squares from the left-upper corner to the right lower one, and light colors for the remaining area. As we can see from the matrix plot, The HMM model for the ‚ÄòPop‚Äô class is able to perfectly predict the class of the songs. ‚ÄòCountry‚Äô and ‚ÄòHip-hop‚Äô are also performing good. However, the worst model is the one for ‚ÄòRock‚Äô class! sorry, rock-fans!
For an even better evaluation, It‚Äôs always recommended to use the precision and recall metrics for the classification problem. sklearn made it easy for us to have a detailed report about the precision and recall of our multiclass classification. We just need to provide the real and predicted values and our classes names.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">classification_report</span><span class="p">(</span><span class="n">real</span><span class="p">,</span> <span class="n">pred</span><span class="p">,</span> <span class="n">target_names</span><span class="o">=</span><span class="n">classes</span><span class="p">))</span>
</code></pre></div></div>

<p>The output looks like:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">precision</span>    <span class="n">recall</span>  <span class="n">f1</span><span class="o">-</span><span class="n">score</span>   <span class="n">support</span>

      <span class="n">blues</span>       <span class="mf">0.50</span>      <span class="mf">0.44</span>      <span class="mf">0.47</span>         <span class="mi">9</span>
  <span class="n">classical</span>       <span class="mf">1.00</span>      <span class="mf">0.67</span>      <span class="mf">0.80</span>         <span class="mi">9</span>
    <span class="n">country</span>       <span class="mf">0.50</span>      <span class="mf">0.89</span>      <span class="mf">0.64</span>         <span class="mi">9</span>
      <span class="n">disco</span>       <span class="mf">0.50</span>      <span class="mf">0.44</span>      <span class="mf">0.47</span>         <span class="mi">9</span>
     <span class="n">hiphop</span>       <span class="mf">0.70</span>      <span class="mf">0.78</span>      <span class="mf">0.74</span>         <span class="mi">9</span>
       <span class="n">jazz</span>       <span class="mf">0.60</span>      <span class="mf">0.67</span>      <span class="mf">0.63</span>         <span class="mi">9</span>
      <span class="n">metal</span>       <span class="mf">0.67</span>      <span class="mf">0.67</span>      <span class="mf">0.67</span>         <span class="mi">9</span>
        <span class="n">pop</span>       <span class="mf">0.75</span>      <span class="mf">1.00</span>      <span class="mf">0.86</span>         <span class="mi">9</span>
     <span class="n">reggae</span>       <span class="mf">0.80</span>      <span class="mf">0.44</span>      <span class="mf">0.57</span>         <span class="mi">9</span>
       <span class="n">rock</span>       <span class="mf">0.33</span>      <span class="mf">0.22</span>      <span class="mf">0.27</span>         <span class="mi">9</span>

<span class="n">avg</span> <span class="o">/</span> <span class="n">total</span>       <span class="mf">0.64</span>      <span class="mf">0.62</span>      <span class="mf">0.61</span>        <span class="mi">90</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>That brings us to the end of this tutorial. The performance of our Hidden Markov models is relatively average, and obviously, there is a huge room for improvement. Indeed, the Hidden Markov Models are interpretable and powerful for time series data, however, they require a lot of fine-tuning (number of hidden states, input features ‚Ä¶). Next, It would be good to try other approaches for classifying music genres such as a recurrent neural network (LSTM).</p>
:ET